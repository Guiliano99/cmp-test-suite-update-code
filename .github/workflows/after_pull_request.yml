# SPDX-FileCopyrightText: Copyright 2025 Siemens AG
#
# SPDX-License-Identifier: Apache-2.0
#
# This workflow builds and pushes the Mock-CA Docker image after a pull request
# is merged into the main branch. This is useful for ensuring that the
# latest changes are reflected in the Docker image used for testing the CMP-Test-Suite itself.
# It is triggered only when a pull request is closed and merged, not just closed.
# The image is tagged with the commit SHA, latest, and the version specified in the VERSION file.

name: After Merge Workflow

on:
  pull_request:
    types: [closed]

permissions:
  contents: read
  packages: write

# Optional: still keep this to avoid duplicate triggers
concurrency:
  group: after-merge-${{ github.repository }}
  cancel-in-progress: true

jobs:
  gate:
    name: Check if "Build and push base docker images" is running
    runs-on: ubuntu-24.04
    permissions:
      actions: read   # required to list workflow runs
      contents: read
    outputs:
      ok: ${{ steps.check.outputs.ok }}
      reason: ${{ steps.check.outputs.reason }}
    steps:
      - id: check
        name: Detect other workflow
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const otherName = 'Build and push base docker images';

            // Find the other workflow by name
            const wfList = await github.rest.actions.listRepoWorkflows({ owner, repo });
            const wf = wfList.data.workflows.find(w => w.name === otherName);

            if (!wf) {
              core.info(`Other workflow "${otherName}" not found â€” allowing run.`);
              core.setOutput('ok', 'true');
              core.setOutput('reason', 'workflow-not-found');
              return;
            }

            // Count runs that are in progress or queued
            const states = ['in_progress', 'queued'];
            let busy = 0;
            for (const status of states) {
              const res = await github.rest.actions.listWorkflowRuns({
                owner, repo, workflow_id: wf.id, status
              });
              busy += res.data.total_count || 0;
            }

            if (busy > 0) {
              core.info(`Other workflow is busy (${busy} run(s)). Skipping.`);
              core.setOutput('ok', 'false');
              core.setOutput('reason', 'other-workflow-busy');
            } else {
              core.setOutput('ok', 'true');
              core.setOutput('reason', 'none');
            }

  build_mock_ca_image_and_push:
    name: Build & push Mock-CA image
    needs: gate
    if: needs.gate.outputs.ok == 'true'   # only run if gate says OK
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Read version
        id: get_version
        run: |
          VERSION=$(tr -d ' \t\n\r' < VERSION)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Some accounts did not use a lowercase repository owner, so we need to ensure
      # that the repository owner is always in lowercase to be able to build the images.
      - name: Set lowercase GitHub owner
        run: echo "REPO_OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Build and push dev Docker image
        env:
          VERSION: ${{ steps.get_version.outputs.version }}
        run: |
          docker buildx build \
            --tag ghcr.io/${REPO_OWNER_LC}/cmp-mock-ca:latest \
            --build-arg BASE_IMAGE=ghcr.io/${REPO_OWNER_LC}/cmp-mock-ca:latest \
            --push \
            -f data/dockerfiles/Dockerfile.mock_ca .

  explain_skip:
    name: Explain skipped run
    needs: gate
    if: needs.gate.outputs.ok != 'true'
    runs-on: ubuntu-24.04
    steps:
      - run: | 
            echo "This workflow was skipped because the 'Build and push base docker images' workflow is busy or not found."
            echo "Reason: ${{ needs.gate.outputs.reason }}"
