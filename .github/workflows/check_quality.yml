# SPDX-FileCopyrightText: Copyright 2025 Siemens AG
#
# SPDX-License-Identifier: Apache-2.0

name: Check code quality

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  prepare_env:
    runs-on: ubuntu-22.04
    outputs:
      image_lc: ${{ steps.setenv.outputs.image_lc }}
    steps:
      - name: Set lowercase image name
        id: setenv
        run: |
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_LC="ghcr.io/${OWNER_LC}/cmp-test-dev:latest"
          echo "image_lc=$IMAGE_LC" >> $GITHUB_OUTPUT

  ruff_lint:
    needs: prepare_env
    runs-on: ubuntu-22.04
    env:
      IMAGE: ${{ needs.prepare_env.outputs.image_lc }}
    steps:
      - uses: actions/checkout@v4
      - name: Code style (ruff)
        run: docker run --rm -v "$PWD:/workspace" -w /workspace "$IMAGE" ruff check

  license_check:
    needs: prepare_env
    runs-on: ubuntu-22.04
    env:
      IMAGE: ${{ needs.prepare_env.outputs.image_lc }}
    steps:
      - uses: actions/checkout@v4
      - name: License check (reuse)
        run: docker run --rm -v "$PWD:/workspace" -w /workspace "$IMAGE" reuse lint

  rf_style_check:
    needs: prepare_env
    runs-on: ubuntu-22.04
    continue-on-error: true
    env:
      IMAGE: ${{ needs.prepare_env.outputs.image_lc }}
    steps:
      - uses: actions/checkout@v4
      - name: RobotFramework style check (robocop)
        run: docker run --rm -v "$PWD:/workspace" -w /workspace "$IMAGE" robocop check --ignore VAR04

  spelling_check:
    needs: prepare_env
    runs-on: ubuntu-22.04
    env:
      IMAGE: ${{ needs.prepare_env.outputs.image_lc }}
    steps:
      - uses: actions/checkout@v4
      - name: Spelling checker (codespell)
        run: |
          docker run --rm -v "$PWD:/workspace" -w /workspace "$IMAGE" \
            codespell . --check-filenames --skip "*.html,*.pem,*.xml,*venv*,*fips/*.py,*/announcement.py"

  dependency_check:
    # See if newer versions of our Python dependencies are available. This does
    # not enforce anything, and only has an informational character.
    needs: prepare_env
    runs-on: ubuntu-22.04
    continue-on-error: true
    env:
      IMAGE: ${{ needs.prepare_env.outputs.image_lc }}
    steps:
      - name: Check for outdated dependencies
        run: |
          docker run --rm -v "$PWD:/workspace" -w /workspace "$IMAGE" bash -c '
            echo "Checking for outdated packages..."
            OUTDATED=$(pip list --outdated --format=columns)
            if [ -z "$OUTDATED" ]; then
              echo "All packages are up to date!"
              exit 0
            else
              echo "Outdated packages detected:"
              echo "$OUTDATED"
              exit 1
            fi'

  version_check:
    needs: prepare_env
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Ensure version is in CHANGELOG.md
        run: |
          VERSION=$(cat VERSION)
          if ! grep -E "^# $VERSION" CHANGELOG.md; then
            echo "Error: CHANGELOG.md does not contain an entry for version $VERSION."
            exit 1
          fi
  # ----------------------------------------------------------------------------
  # Stage 2: these checks are more expensive and do more with the code, e.g., attempt to import dependencies,
  # execute some logic, etc.
  pylint:
    # needs must include prepare_env, as it is used to set the image name.
    needs: [prepare_env, ruff_lint, license_check, rf_style_check, spelling_check]
    runs-on: ubuntu-22.04
    env:
      IMAGE: ${{ needs.prepare_env.outputs.image_lc }}
    steps:
      - uses: actions/checkout@v4
      - name: Pylint check
        run: docker run --rm -v "$PWD:/workspace" -w /workspace "$IMAGE" pylint --fail-under=9.4 resources

  unit_test:
    # needs must include prepare_env, as it is used to set the image name.
    needs: [prepare_env, ruff_lint, license_check, rf_style_check, spelling_check]
    runs-on: ubuntu-22.04
    env:
      IMAGE: ${{ needs.prepare_env.outputs.image_lc }}
    steps:
      - uses: actions/checkout@v4
      - name: Run unit tests
        run: |
          docker run --rm -v "$PWD:/workspace" -w /workspace -e OQS_INSTALL_PATH=/root/_oqs "$IMAGE" \
            python3 -m unittest discover -s unit_tests

  type_check:
    needs: prepare_env
    runs-on: ubuntu-22.04
    # not enforced yet, but it is still executed to provide some info.
    continue-on-error: true
    env:
      IMAGE: ${{ needs.prepare_env.outputs.image_lc }}
    steps:
      - uses: actions/checkout@v4
      - name: Pyright type check
        run: docker run --rm -v "$PWD:/workspace" -w /workspace "$IMAGE" pyright

  prepare_mock_ca_env:
    runs-on: ubuntu-22.04
    outputs:
      mock_ca_image: ${{ steps.setenv.outputs.mock_ca_image }}
    steps:
      - name: Set lowercase mock CA image
        id: setenv
        run: |
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          MOCK_CA_IMAGE="ghcr.io/${OWNER_LC}/cmp-mock-ca:latest"
          echo "mock_ca_image=$MOCK_CA_IMAGE" >> $GITHUB_OUTPUT

  prepare_test_env:
    runs-on: ubuntu-22.04
    outputs:
      test_image: ${{ steps.setenv.outputs.test_image }}
    steps:
      - name: Set lowercase test image
        id: setenv
        run: |
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          TEST_IMAGE="ghcr.io/${OWNER_LC}/cmp-test:latest"
          echo "test_image=$TEST_IMAGE" >> $GITHUB_OUTPUT 

  run_tests:
    needs:
      - prepare_mock_ca_env
      - prepare_test_env
      - prepare_env
      - unit_test
    runs-on: ubuntu-22.04
    env:
      IMAGE: ${{ needs.prepare_test_env.outputs.test_image }}
      MOCK_CA_IMAGE: ${{ needs.prepare_mock_ca_env.outputs.mock_ca_image }}
    steps:
      - uses: actions/checkout@v4
      - name: Start Mock CA
        run: docker run -d --rm --name mock-ca -p 5000:5000 "$MOCK_CA_IMAGE"
      - name: Run tests
        run: docker run --rm --network host -v "$PWD:/workspace" -w /workspace "$IMAGE" robot --pythonpath=./ --exclude verbose-tests --variable environment:mock_ca tests
      - name: Stop Mock CA
        if: always()
        run: docker stop mock-ca

      - name: Start Mock CA
        run: docker run -d --rm --name mock-ca -p 5000:5000 "$MOCK_CA_IMAGE"
      - name: Run verbose tests
        run: docker run --rm --network host -v "$PWD:/workspace" -w /workspace "$IMAGE" robot --pythonpath=./ --variable environment:mock_ca tests
      - name: Stop Mock CA
        if: always()
        run: docker stop mock-ca

      - name: Start Mock CA
        run: docker run -d --rm --name mock-ca -p 5000:5000 "$MOCK_CA_IMAGE"
      - name: Run PQ/Hybrid tests
        run: docker run --rm --network host -v "$PWD:/workspace" -w /workspace "$IMAGE" robot --pythonpath=./ --exclude verbose-tests --variable environment:mock_ca tests_pq_and_hybrid
      - name: Stop Mock CA
        if: always()
        run: docker stop mock-ca

      - name: Start Mock CA
        run: docker run -d --rm --name mock-ca -p 5000:5000 "$MOCK_CA_IMAGE"
      - name: Run mock CA tests
        run: docker run --rm --network host -v "$PWD:/workspace" -w /workspace "$IMAGE" robot --pythonpath=./ --exclude verbose-tests --variable environment:mock_ca tests_mock_ca
      - name: Stop Mock CA
        if: always()
        run: docker stop mock-ca

      - name: Start Mock CA
        run: docker run -d --rm --name mock-ca -p 5000:5000 "$MOCK_CA_IMAGE"
      - name: Run client tests
        run: docker run --rm --network host -v "$PWD:/workspace" -w /workspace "$IMAGE" robot --pythonpath=./ --exclude verbose-tests --variable environment:mock_ca client_tests
      - name: Stop Mock CA
        if: always()
        run: docker stop mock-ca